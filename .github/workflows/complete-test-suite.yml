# ðŸ¤– [IA] - v1.2.4: Complete Test Suite Pipeline - 100% Docker-based CI/CD
name: Complete Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Permite ejecuciÃ³n manual

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ========================================
  # Job 1: Unit & Integration Tests
  # ========================================
  test-unit-integration:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build test container
        run: |
          docker compose -f docker-compose.test.yml build cashguard-tests
      
      - name: Run unit tests
        run: |
          docker compose -f docker-compose.test.yml run --rm cashguard-tests npm run test:unit
      
      - name: Run integration tests
        run: |
          docker compose -f docker-compose.test.yml run --rm cashguard-tests npm run test:integration
      
      - name: Generate coverage report
        run: |
          docker compose -f docker-compose.test.yml run --rm cashguard-tests npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: cashguard-coverage
          fail_ci_if_error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-unit-integration
          path: |
            coverage/
            test-results/

  # ========================================
  # Job 2: E2E Tests with Playwright
  # ========================================
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test-unit-integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build E2E containers
        run: |
          docker compose -f docker-compose.test.yml --profile e2e build
      
      - name: Start application for E2E
        run: |
          docker compose -f docker-compose.test.yml --profile e2e up -d cashguard-app
          sleep 10 # Wait for app to be ready
      
      - name: Run E2E tests
        run: |
          docker compose -f docker-compose.test.yml --profile e2e run --rm cashguard-e2e
      
      - name: Stop E2E containers
        if: always()
        run: |
          docker compose -f docker-compose.test.yml --profile e2e down
      
      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: |
            e2e/playwright-report/
            e2e/test-results/

  # ========================================
  # Job 3: Security Audit
  # ========================================
  test-security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test-unit-integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security audit in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            node:20-alpine \
            sh -c "npm ci && npm audit --audit-level=moderate"
        continue-on-error: true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
      
      - name: OWASP Dependency Check
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            owasp/dependency-check \
            --scan /src \
            --project "CashGuard Paradise" \
            --format HTML \
            --out /src/dependency-check-report
        continue-on-error: true
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            dependency-check-report/
            npm-audit.json

  # ========================================
  # Job 4: Performance Metrics
  # ========================================
  test-performance:
    name: Performance Metrics
    runs-on: ubuntu-latest
    needs: test-unit-integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build production container
        run: |
          docker compose build cashguard-prod
      
      - name: Start production server
        run: |
          docker compose --profile prod up -d
          sleep 10 # Wait for server
      
      - name: Run Lighthouse CI
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/app \
            -w /app \
            patrickhulce/lhci-client:0.12.0 \
            lhci autorun \
            --collect.url=http://localhost:8080 \
            --assert.preset=lighthouse:recommended \
            --assert.assertions.categories:performance=75 \
            --assert.assertions.categories:accessibility=90 \
            --assert.assertions.categories:best-practices=90 \
            --assert.assertions.categories:seo=80
        continue-on-error: true
      
      - name: Bundle size check
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            node:20-alpine \
            sh -c "npm ci && npm run build && du -sh dist/"
      
      - name: Stop production server
        if: always()
        run: |
          docker compose --profile prod down
      
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            .lighthouseci/
            dist/

  # ========================================
  # Job 5: TypeScript & Lint Check
  # ========================================
  test-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: TypeScript check in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            node:20-alpine \
            sh -c "npm ci && npx tsc --noEmit"
      
      - name: ESLint check in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            node:20-alpine \
            sh -c "npm ci && npm run lint"

  # ========================================
  # Job 6: Deploy (only on main branch)
  # ========================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-unit-integration, test-e2e, test-security, test-performance, test-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build production image
        run: |
          docker build -t cashguard-paradise:${{ github.sha }} .
      
      - name: Deploy notification
        run: |
          echo "ðŸš€ Ready to deploy version ${{ github.sha }} to production!"
          echo "Deploy steps would go here (e.g., push to registry, update k8s, etc.)"
      
      # AquÃ­ irÃ­an los pasos reales de deploy:
      # - Push to Docker registry
      # - Update Kubernetes manifests
      # - Deploy to cloud provider
      # - Run smoke tests
      # - Notify team